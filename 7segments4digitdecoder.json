{
	  "inputtext" : ["<NAME>", "<INPUT>", "<RESET>", "<CLOCK>", "<ENABLE>", "<SEGMENTS>", "<ANODES>"],
	"selects" : 
	[
		{ "name" : "<EDGE_TYPE>", "options" : [ "rising_edge", "falling_edge"] }
	],
	  "moduleName" : "7 Segments 4 Digit Decoder",
	  "moduleCode" : "--Decoder for the 4-digit 7-segment display. \n--16-bit input and the anodes and catodes for the output. \n--Includes a 2-bit counter, a MUX for the number input, a decoder for the anode selected and the 7-segment decoder.\nMade by Carmen Rodr√≠guez Villaverde\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse ieee.std_logic_unsigned.all;\nentity <NAME> is\n    Port ( <INPUT> : in  STD_LOGIC_VECTOR (15 downto 0);\n           <RESET> : in  STD_LOGIC;\n           <CLOCK> : in  STD_LOGIC;\n           <ENABLE> : in  STD_LOGIC;\n           <SEGMENTS> : out  STD_LOGIC_VECTOR (6 downto 0);\n           <ANODES> : out  STD_LOGIC_VECTOR (3 downto 0));\nend <NAME>;\narchitecture Behavioral of <NAME> is\n    signal s: std_logic_vector(1 downto 0);\n    signal digit: std_logic_vector(3 downto 0);\nbegin\n-- 2 BITS COUNTER\nprocess(<RESET>, <CLOCK>)\nbegin\n    if <RESET>='1' then\n          s<=\"00\";\n    elsif <EDGE_TYPE>(<CLOCK>) then\n            if <ENABLE>='1' then      --this enable signal should be connected to a clock \n                s<=s+1;               --with the suitable changing frequency for the anodes\n            end if;\n    end if;\nend process;\n--MULTIPLEXOR 4 CHANNELS\ndigit<= <INPUT>(3 downto 0) when s=0 else\n        <INPUT>(7 downto 4) when s=1 else\n        <INPUT>(11 downto 8) when s=2 else\n        <INPUT>(15 downto 12);\n--ANODES DECODER\n<ANODES> <= \"1110\" when s=0 else\n            \"1101\" when s=1 else\n            \"1011\" when s=2 else\n            \"0111\";\n      \n--7 SEGMENTS DECODER\nprocess(digit)\nbegin\n    case digit is\n        when \"0000\" => <SEGMENTS> <= \"0000001\"; -- \"0\"     \n        when \"0001\" => <SEGMENTS> <= \"1001111\"; -- \"1\" \n        when \"0010\" => <SEGMENTS> <= \"0010010\"; -- \"2\" \n        when \"0011\" => <SEGMENTS> <= \"0000110\"; -- \"3\" \n        when \"0100\" => <SEGMENTS> <= \"1001100\"; -- \"4\" \n        when \"0101\" => <SEGMENTS> <= \"0100100\"; -- \"5\" \n        when \"0110\" => <SEGMENTS> <= \"0100000\"; -- \"6\" \n        when \"0111\" => <SEGMENTS> <= \"0001111\"; -- \"7\" \n        when \"1000\" => <SEGMENTS> <= \"0000000\"; -- \"8\"     \n        when \"1001\" => <SEGMENTS> <= \"0000100\"; -- \"9\" \n        when \"1010\" => <SEGMENTS> <= \"0000010\"; -- a\n        when \"1011\" => <SEGMENTS> <= \"1100000\"; -- b\n        when \"1100\" => <SEGMENTS> <= \"0110001\"; -- C\n        when \"1101\" => <SEGMENTS> <= \"1000010\"; -- d\n        when \"1110\" => <SEGMENTS> <= \"0110000\"; -- E\n        when others => <SEGMENTS> <= \"0111000\"; -- F \n    end case;\nend process;\nend Behavioral;"
	
}
