{
	"inputtext" : ["<NAME>", "<CLOCK>", "<RESET>", "<INPUT>", "<OUTPUT>", "<NUMBER_OF_BITS>"],
	"selects" : 
	[
    		{ "name" : "<EDGE_TYPE>", "options" : [ "rising_edge", "falling_edge"] },
        	{ "name" : "<RESET_TYPE>", "options" : [ "Synchronous", "Asynchronous"] }
	],
	"autogenerate" : "\n\t\t\t\t\tQ_signal(<NUMBER_OF_BITS>) <= <INPUT>(<NUMBER_OF_BITS>);",
	"moduleName" : "PISO Shift Register",
	"moduleCode" : "-- NOVA-HDL-Assist\n
	
	-- PISO Shift Register \n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity <NAME> is\n\tPort ( <CLOCK> : in STD_LOGIC;\n\t<RESET> : in STD_LOGIC;\n\t<INPUT> : in STD_LOGIC_VECTOR (<NUMBER_OF_BITS_MINUS_1> downto 0);\n\t--\n\t<OUTPUT> : out STD_LOGIC_VECTOR (<NUMBER_OF_BITS_MINUS_1> downto 0));\nend <NAME>;\n\narchitecture Behavioral of <NAME> is \n\nsignal Q: STD_LOGIC_VECTOR(<NUMBER_OF_BITS_MINUS_1> downto 0);\n\nbegin\n\n\tPISO_REGISTER: process(<CLOCK>)\n\tbegin\n\t\tPISO_REGISTER: process(<CLOCK>)\n\t\tbegin\n\t\t\tif <EDGE_TYPE>(<CLOCK>) then\n\t\t\t\tif <RESET> = '1' then\n\t\t\t\t\tQ_signal <= (others => '0');\n\t\t\t\telse\n\t\t\t\t\tif LOAD = '1' then\n\t\t\t\t\t\tQ_signal((<NUMBER_OF_BITS_MINUS_1>) downto (<MIDDLE_BIT_MINUS_1>)) <= Q_signal((<MIDDLE_BIT>) downto 0);\n\t\t\t\telse\n\t\t\t\t\tQ_signal(<NUMBER_OF_BITS_MINUS_1>) <= <INPUT>(<NUMBER_OF_BITS_MINUS_1>);\n\t\t\t\t\t<AUTO_GENERATE>\n\t\t\t\tend if;\n\t\t\t\tQ_signal(0) <= <INPUT>(0);\n\t\t\tend if;\n\t\tend if;\n\tend process;\n\t<OUTPUT> <= Q_signal(<NUMBER_OF_BITS_MINUS_1>);\nend Behavioral;",
	"moduleCode2" : "-- NOVA-HDL-Assist\n
	
	
	
	-- PISO Shift Register \n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity <NAME> is\n\tPort ( <CLOCK> : in STD_LOGIC;\n\t<RESET> : in STD_LOGIC;\n\t<INPUT> : in STD_LOGIC_VECTOR (<NUMBER_OF_BITS_MINUS_1> downto 0);\n\t--\n\t<OUTPUT> : out STD_LOGIC_VECTOR (<NUMBER_OF_BITS_MINUS_1> downto 0));\nend <NAME>;\n\narchitecture Behavioral of <NAME> is \n\nsignal Q: STD_LOGIC_VECTOR(<NUMBER_OF_BITS_MINUS_1> downto 0);\n\nbegin\n\n\tPISO_REGISTER: process(<CLOCK>)\n\tbegin\n\t\tPISO_REGISTER: process(<CLOCK>)\n\t\tbegin\n\t\t\tif <RESET> = '1' then\n\t\t\t\tQ_signal <= (others => '0');\n\t\t\telse\n\t\t\t\tif LOAD = '1' then\n\t\t\t\t\tQ_signal((<NUMBER_OF_BITS_MINUS_1>) downto (<MIDDLE_BIT_MINUS_1>)) <= Q_signal((<MIDDLE_BIT>) downto 0);\n\t\t\telse\n\t\t\t\tQ_signal(<NUMBER_OF_BITS_MINUS_1>) <= <INPUT>(<NUMBER_OF_BITS_MINUS_1>);\n\t\t\t\t<AUTO_GENERATE>\n\t\t\tend if;\n\t\t\tQ_signal(0) <= <INPUT>(0);\n\t\tend if;\n\tend process;\n\t<OUTPUT> <= Q_signal(<NUMBER_OF_BITS_MINUS_1>);\nend Behavioral;"
}
