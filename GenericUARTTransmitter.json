{
	"inputtext" : ["<NAME>", "<RESET>", "<CLOCK>", "<NEW_DATA>", "<INPUT>", "<RXD>", "<NUMBER_OF_BITS>"],
	"selects" : 
	[
		{ "name" : "<EDGE_TYPE>", "options" : [ "rising_edge", "falling_edge"] }
	],
	  "moduleName" : "Generic UART Transmitter",
	  "moduleCode" : "-- Generic UART Transmitter Module with start, stop and parity bit.\n-- Made by Carmen Rodr√≠guez Villaverde\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse ieee.std_logic_unsigned.all;\nuse IEEE.math_real.all;\nentity <NAME> is\nGeneric (Bauds: integer:= 115200);\n    Port ( <CLOCK> : in  STD_LOGIC;\n           <RESET> : in  STD_LOGIC;\n           <NEW_DATA> : in  STD_LOGIC;\n           <INPUT> : in  STD_LOGIC_VECTOR (<NUMBER OF BITS>-1 downto 0);\n           <RXD> : out  STD_LOGIC);\nend <NAME>;\narchitecture Behavioral of <NAME> is\n    ---- Control Unit Signals ----\n    type estado_type is (Clear, WaitStart, SendStartBit, SendBit, SendParityBit, SendStopBit);\n    signal current_state, following_state: estado_type;\n    \n    signal enable, bit_sent, counter_en, parity_bit, RXD_aux, load_input: std_logic;\n    signal counter: std_logic_vector((log2(<NUMBER_OF_BITS>))-1 downto 0);\n    signal input_reg: std_logic_vector(<NUMBER_OF_BITS>-1 downto 0);\n    \n    ---- Operational Unit Signals ----\n    signal Q, Qt, NEW_DATA_FLAG: std_logic;\n    \n    ---- Bauds Signals ----\n    Constant pulses: integer:=50000000/Bauds;\n    Constant bits: integer:= integer(ceil(log2(real(pulses))));\n    Signal Count: std_logic_vector(bits-1 downto 0);\nbegin\n------------- Control Unit --------------------\n    process(<CLOCK>, <RESET>)\n        begin\n            if <RESET>='1' then\n                current_state <= Clear;\n            elsif <EDGE_TYPE>(<CLOCK>) then\n                current_state <= following_state;\n            end if;\n        end process;\n    --States evolution\n    process (NEW_DATA_FLAG, counter, bit_sent, current_state)\n        begin\n            case current_state is\n                when Clear =>\n                    following_state <= WaitStart;\n                when WaitStart =>\n                    if NEW_DATA_FLAG = '1' then                \n                        following_state <= SendStartBit;\n                    else\n                        following_state <= WaitStart;\n                    end if;\n                    \n                when SendStartBit =>\n                    if bit_sent = '1' then                \n                        following_state <= SendBit;\n                    else\n                        following_state <= SendStartBit;\n                    end if;\n                when SendBit =>                    \n                    if counter=0 and bit_sent='1' then\n                        following_state <= SendParityBit;\n                    else\n                        following_state <= SendBit;\n                    end if;\n                    \n                when SendParityBit =>\n                    if bit_sent = '1' then                \n                        following_state <= SendStopBit;\n                    else\n                        following_state <= SendParityBit;\n                    end if;\n                    \n                when SendStopBit =>\n                    if bit_sent = '1' then                \n                        following_state <= WaitStart;\n                    else\n                        following_state <= SendStopBit;\n                    end if;\n                when others =>\n                        following_state <= WaitStart;\n            end case;\n        end process;\n    \n    --Salidas    \n    <RXD> <= '1' when current_state = Clear else\n         '1' when current_state = WaitStart else\n         '0' when current_state = SendStartBit else\n            '1' when current_state = SendStopBit else\n         parity_bit when current_state = SendParityBit else\n         RXD_aux;\n             \n    load_input <= '1' when current_state = SendStartBit else '0';\n    enable <= '0' when current_state = WaitStart else '1';\n    counter_en <= '1' when current_state = SendBit else\n              '1' when current_state = SendStartBit else\n              '0';\n-- OPERATIONAL UNIT ---------------------------------------------------------------------------------\n    -- INPUT Register to not allow changes when transmitting\n    process(<CLOCK>, <RESET>)\n    begin\n        if <RESET> ='1' then\n            input_reg <=(others=>'0');\n        elsif <EDGE_TYPE>(<CLOCK>) then\n            if load_input='1' then\n                input_reg <= INPUT;\n            end if;\n        end if;\n    end process;\n    \n    -- Counter for the bit being sent\n    process(<CLOCK>,<RESET>)\n    begin\n        if <RESET> = '1' then\n            counter <=(others=>'0');\n            parity_bit <= '0';\n            RXD_aux <= '0';\n        elsif <EDGE_TYPE>(<CLOCK>) then\n            if enable='0' then \n                counter <=(others=>'0');\n                parity_bit <= '0';\n            elsif (bit_sent='1' and counter_en='1') then\n                counter <= counter + 1;\n                RXD_aux <= input_reg(CONV_INTEGER(counter));\n                if input_reg(CONV_INTEGER(counter))='1' then\n                    parity_bit <= not(parity_bit);\n                end if;\n            end if;\n        end if;\n    end process;\n    \n    -- Rising edge detector for the NEW DATA input flag\n    process(<CLOCK>,<RESET>)\n    begin\n        if <RESET> = '1' then\n            Q <= '0';\n            Qt <= '0';\n        elsif <EDGE_TYPE>(<CLOCK>) then\n            Q <= <NEW_DATA>;\n            Qt <= Q;\n        end if;\n    end process;\n    NEW_DATA_FLAG <= '1' when (Q='1' and Qt='0') else\n                          '0';\n   -- Cycles counter\n    process(<CLOCK>,<RESET>)\n    begin\n        if <RESET> = '1' then\n            Count <= (others =>'0');\n        elsif <EDGE_TYPE>(<CLOCK>) then\n            if enable = '0' then\n                Count <= (others =>'0');\n            else\n                if Count < pulses then\n                    Count <= Count +1;\n                else \n                    Count <= (others =>'0');\n                end if;\n            end if;\n        end if;\n    end process;\n    bit_sent <= '1' when Count=pulses else '0';\nend Behavioral;"
}
